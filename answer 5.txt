5) 
Advanced: Comparison with Other Sorting Algorithms
Compare the bubble sort algorithm with quicksort and mergesort. Discuss the advantages and disadvantages of bubble sort in different scenarios. Additionally, analyze when it might be preferable to use other sorting algorithms.
Sol:-
*Bubble Sort:
    Advantages:
    Simple to understand and implement.
    No need for additional memory space (in-place sorting).
    Performs well on small datasets or nearly sorted datasets.
    Disadvantages:
    Inefficient for large datasets, as its time complexity is O(n^2).
    Not suitable for real-world scenarios with extensive data.

*Quicksort:
    Advantages:
    Efficient for large datasets with an average time complexity of O(n log n).
    In-place sorting, which reduces memory usage.
    Better average-case performance compared to Bubble Sort.
    Disadvantages:
    Worst-case time complexity is O(n^2) when the pivot selection is poor.
    Not stable, meaning the relative order of equal elements may change.

 *Mergesort:
    Advantages:
    Stable and consistent O(n log n) time complexity, regardless of the input.
    Suitable for linked lists.
    Predictable performance.
    Disadvantages:
    Requires additional memory space proportional to the size of the dataset.
    May have a higher constant factor in the time complexity compared to quicksort.

  Comparison:
    Efficiency:
    Quicksort and mergesort generally outperform bubble sort on large datasets due to their lower time complexities.
    Bubble sort has a higher time complexity, making it inefficient for large datasets.
    Stability:
    Bubble sort is stable (maintains the order of equal elements), whereas quicksort is not inherently stable.
    Mergesort is also stable.

    Memory Usage:
    Bubble sort and quicksort are in-place algorithms, meaning they do not require additional memory (except for quicksort's recursion stack).
    Mergesort requires additional memory proportional to the size of the dataset.

  When to Use Each:
    Bubble Sort:
    Useful for educational purposes and scenarios with small datasets or nearly sorted data.
    When simplicity is a priority.

    Quicksort:
    Preferred for general-purpose sorting of large datasets.
    When in-place sorting and better average-case performance are important.

    Mergesort:
    Suitable when additional memory usage is not a concern.
    When a stable sort is required.
    Often used for sorting linked lists.

In summary, bubble sort is suitable for educational purposes or small datasets, while quicksort and mergesort are more efficient for larger datasets in most real-world scenarios. The choice between quicksort and mergesort depends on specific requirements such as stability and memory usage.
